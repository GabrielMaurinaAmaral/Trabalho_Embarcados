#![no_std]
#![no_main]

use defmt::*;
use embassy_executor::Spawner;
use embassy_stm32::gpio::{Level, Output, Speed, Pull};
use embassy_stm32::exti::ExtiInput;
use embassy_stm32::usart::{Config, Uart};
use embassy_stm32::bind_interrupts;
use embassy_stm32::peripherals;
use embassy_time::{Timer, Instant};
use embassy_sync::signal::Signal;
use embassy_sync::blocking_mutex::raw::ThreadModeRawMutex;
use heapless::String;
use {defmt_rtt as _, panic_probe as _};

static BUTTON_SIGNAL: Signal<ThreadModeRawMutex, ()> = Signal::new();
//static CONSOLE_OUTPUT: Signal<ThreadModeRawMutex, String<256>> = Signal::new();

#[derive(Clone, Copy)]
struct TaskStats {
    task_count: u32,
    uptime_ms: u64,
    button_presses: u32,
    led1_blinks: u32,
    led2_blinks: u32,
}
static mut LEDSPEED: u32 = 200; // Velocidade do LED1 em milissegundos
static mut SYSTEM_STATS: TaskStats = TaskStats {
    task_count: 0,
    uptime_ms: 0,
    button_presses: 0,
    led1_blinks: 0,
    led2_blinks: 0,
};
bind_interrupts!(struct Irqs {
    USART1 => embassy_stm32::usart::InterruptHandler<peripherals::USART1>;
});

#[embassy_executor::task]
async fn console_shell(mut uart: Uart<'static, embassy_stm32::mode::Async>) {
    info!("Console_Shell iniciado");
    
    let mut buffer = [0u8; 1];
    let mut _cmd_buffer = String::<64>::new();
    loop {
        let _ = uart.read(&mut buffer).await; 
        if buffer[0] == b'\r' || buffer[0] == b'\n' {
            if !_cmd_buffer.is_empty() {
                process_command(&mut uart, &_cmd_buffer).await;
                _cmd_buffer.clear();
            }
            let _ = uart.write(b"\r\n> ").await; // Prompt
        } else if buffer[0] == b'\x08' || buffer[0] == 127 { // Backspace
            if !_cmd_buffer.is_empty() {
                _cmd_buffer.pop();
                let _ = uart.write(b"\x08 \x08").await; // Apaga o último caractere
            }
        } else {
            if _cmd_buffer.push(buffer[0] as char).is_ok() {
                let _ = uart.write(&buffer).await; // Ecoa o caractere
            }
        }
    }
}

async fn process_command(uart: &mut Uart<'static, embassy_stm32::mode::Async>, cmd: &str) {
    let mut response = String::<512>::new();
    info!("Mensagem: {}", cmd);
    
    if cmd.starts_with("led1=") {
        if let Ok(valor) = cmd[5..].trim().parse::<u32>() {
            unsafe { LEDSPEED = valor; }
            let _ = core::fmt::write(&mut response, format_args!("Velocidade do LED1 ajustada para {} ms\r\n", valor));
        } else {
            let _ = core::fmt::write(&mut response, format_args!("Valor inválido!\r\n"));
        }
    }else{
            match cmd.trim() {
            "help" => {
            let _ = core::fmt::write(&mut response, format_args!(
                "\n=== Comandos do Sistema ===\n\
                 status\n\r\
                 reset\n\r\
                 help\n\r\
                 led1=n (n velocidade desejada em ms)\n\r"
            ));
            }
            "status" => {
                let stats = unsafe { SYSTEM_STATS };
                let _ = core::fmt::write(&mut response, format_args!(
                "\n=== Status do Sistema ===\r\n\
                 Uptime: {} ms\r\n\
                 Tarefas ativas: {}\r\n\
                 Botão pressionado: {} vezes\r\n\
                 LED1 piscou: {} vezes\r\n\
                 LED2 piscou: {} vezes\r\n",
                stats.uptime_ms, stats.task_count, 
                stats.button_presses, stats.led1_blinks, stats.led2_blinks
            ));
            }
            "reset" => {
                unsafe {
                    SYSTEM_STATS.button_presses = 0;
                    SYSTEM_STATS.led1_blinks = 0;
                    SYSTEM_STATS.led2_blinks = 0;
                }
                let _ = core::fmt::write(&mut response, format_args!("\nEstatísticas resetadas!\r\n"));
            }
        
            _ => {
                let _ = core::fmt::write(&mut response, format_args!("Comando não encontrado. Digite 'help' para ajuda.\r\n"));
            }
        }

    }

    
    
    let _ = uart.write(response.as_bytes()).await;
    let _ = uart.write(b"\r\n> ").await;
}

#[embassy_executor::task]
async fn blink_fast(mut led: Output<'static>) {
    loop {
        led.set_high();
        info!("Led 1 aceso!");
        Timer::after_millis(unsafe{LEDSPEED} as u64).await;
        led.set_low();
        info!("Led 1 apagado!");
        Timer::after_millis(unsafe{LEDSPEED} as u64).await;
        
        unsafe {
            SYSTEM_STATS.led1_blinks += 1;
        }
    }
}

#[embassy_executor::task]
async fn blink_slow(mut led: Output<'static>) {
    loop {
        led.set_high();
        info!("Led 2 aceso!");
        Timer::after_millis(1000).await;
        led.set_low();
        info!("Led 2 apagado!");
        Timer::after_millis(1000).await;
        
        unsafe {
            SYSTEM_STATS.led2_blinks += 1;
        }
    }
}

#[embassy_executor::task]
async fn button_handler(mut button: ExtiInput<'static>) {
    loop {
        button.wait_for_rising_edge().await;
        info!("Botão pressionado!");
        
        unsafe {
            SYSTEM_STATS.button_presses += 1;
        }
        
        BUTTON_SIGNAL.signal(());
        
        Timer::after_millis(50).await; 
    }
}

#[embassy_executor::task]
async fn system_monitor() {
    let start_time = Instant::now();
    
    loop {
        Timer::after_secs(1).await;
        
        // Atualizar uptime
        unsafe {
            SYSTEM_STATS.uptime_ms = start_time.elapsed().as_millis();
            SYSTEM_STATS.task_count = 6; // Número fixo de tarefas
        }
        
        info!("Monitor: Sistema rodando há {} ms", unsafe { SYSTEM_STATS.uptime_ms });
    }
}

#[embassy_executor::main]
async fn main(spawner: Spawner) {
    let p = embassy_stm32::init(Default::default());
    info!("Sistema com múltiplos LEDs, botão e console inicializado!");

    let led1 = Output::new(p.PC13, Level::Low, Speed::Low);
    let led2 = Output::new(p.PA11, Level::Low, Speed::Low);
    let button = ExtiInput::new(p.PB12, p.EXTI12, Pull::Down);
    
    let mut config = Config::default();
    config.baudrate = 9600; 
    let uart = Uart::new(
        p.USART1,
        p.PA10, 
        p.PA9,
        Irqs,
        p.DMA2_CH7, 
        p.DMA2_CH2, 
        config,
    ).unwrap();
    
    spawner.spawn(blink_fast(led1)).unwrap();
    spawner.spawn(blink_slow(led2)).unwrap();
    spawner.spawn(button_handler(button)).unwrap();
    spawner.spawn(console_shell(uart)).unwrap();
    spawner.spawn(system_monitor()).unwrap();
    
    info!("Todas as tarefas inicializadas!");
    
    loop {
        Timer::after_secs(10).await;
        info!("Sistema em operação normal - {} tarefas ativas", unsafe { SYSTEM_STATS.task_count });
    }
}
